diff --git a/cmake/modules/LLDBConfig.cmake b/cmake/modules/LLDBConfig.cmake
index 95c009b..ba45a25 100644
--- a/cmake/modules/LLDBConfig.cmake
+++ b/cmake/modules/LLDBConfig.cmake
@@ -122,7 +122,7 @@ function(find_python_libs_windows)
     unset(PYTHON_RELEASE_DLL)
   endif()
 
-  if (NOT (PYTHON_DEBUG_EXE AND PYTHON_RELEASE_EXE AND PYTHON_DEBUG_LIB AND PYTHON_RELEASE_LIB AND PYTHON_DEBUG_DLL AND PYTHON_RELEASE_DLL))
+  if (NOT (PYTHON_RELEASE_EXE AND PYTHON_RELEASE_LIB AND PYTHON_RELEASE_DLL))
     message("Python installation is corrupt. Python support will be disabled for this build.")
     set(LLDB_DISABLE_PYTHON 1 PARENT_SCOPE)
     return()
diff --git a/include/lldb/Core/Module.h b/include/lldb/Core/Module.h
index 35b182a..2a367ba 100644
--- a/include/lldb/Core/Module.h
+++ b/include/lldb/Core/Module.h
@@ -710,6 +710,8 @@ public:
     virtual SectionList *
     GetSectionList ();
 
+    size_t GetModuleSize();
+
     //------------------------------------------------------------------
     /// Notify the module that the file addresses for the Sections have
     /// been updated.
diff --git a/source/Commands/CommandObjectProcess.cpp b/source/Commands/CommandObjectProcess.cpp
index 02a5832..db1b79d 100644
--- a/source/Commands/CommandObjectProcess.cpp
+++ b/source/Commands/CommandObjectProcess.cpp
@@ -1085,11 +1085,16 @@ protected:
             m_interpreter.GetDebugger().GetTargetList().SetSelectedTarget(target_sp.get());
         }
         
+        if (command.GetArgumentCount() == 0)
+            command.SetCommandString("connect://127.0.0.1:4321");
+        
         if (command.GetArgumentCount() == 1)
         {
             const char *plugin_name = NULL;
             if (!m_options.plugin_name.empty())
                 plugin_name = m_options.plugin_name.c_str();
+            else
+                plugin_name = "gdb-remote";
 
             const char *remote_url = command.GetArgumentAtIndex(0);
             process = target_sp->CreateProcess (m_interpreter.GetDebugger().GetListener(), plugin_name, NULL).get();
diff --git a/source/Commands/CommandObjectTarget.cpp b/source/Commands/CommandObjectTarget.cpp
index b530517..fb8c841 100644
--- a/source/Commands/CommandObjectTarget.cpp
+++ b/source/Commands/CommandObjectTarget.cpp
@@ -3361,8 +3361,9 @@ protected:
         bool dump_object_name = false;
         if (m_options.m_format_array.empty())
         {
-            m_options.m_format_array.push_back(std::make_pair('u', 0));
+            // m_options.m_format_array.push_back(std::make_pair('u', 0));
             m_options.m_format_array.push_back(std::make_pair('h', 0));
+            m_options.m_format_array.push_back(std::make_pair('l', 0));
             m_options.m_format_array.push_back(std::make_pair('f', 0));
             m_options.m_format_array.push_back(std::make_pair('S', 0));
         }
@@ -3399,6 +3400,12 @@ protected:
                     dump_object_name = true;
                     break;
 
+                case 'l':
+                    {
+                        strm.Printf("0x%X", module->GetModuleSize());
+                    }
+                    break;
+
                 case 'h':
                 case 'o':
                     // Image header address
@@ -3423,12 +3430,12 @@ protected:
                                         if (format_char == 'o')
                                         {
                                             // Show the offset of slide for the image
-                                            strm.Printf ("0x%*.*" PRIx64, addr_nibble_width, addr_nibble_width, header_load_addr - header_addr.GetFileAddress());
+                                            strm.Printf ("0x%*.*" PRIX64, addr_nibble_width, addr_nibble_width, header_load_addr - header_addr.GetFileAddress());
                                         }
                                         else
                                         {
                                             // Show the load address of the image
-                                            strm.Printf ("0x%*.*" PRIx64, addr_nibble_width, addr_nibble_width, header_load_addr);
+                                            strm.Printf ("0x%*.*" PRIX64, addr_nibble_width, addr_nibble_width, header_load_addr);
                                         }
                                     }
                                     break;
diff --git a/source/Core/Module.cpp b/source/Core/Module.cpp
index 833540e..62d7592 100644
--- a/source/Core/Module.cpp
+++ b/source/Core/Module.cpp
@@ -1324,6 +1324,24 @@ Module::GetSectionList()
     return m_sections_ap.get();
 }
 
+size_t Module::GetModuleSize()
+{
+    SectionList* sections = GetSectionList();
+    size_t moduleSize = 0;
+
+    if (!sections)
+        return moduleSize;
+
+    for (size_t i = 0, n = sections->GetSize(); i != n; ++i)
+    {
+        SectionSP s = sections->GetSectionAtIndex(i);
+        if (s)
+            moduleSize += s->GetByteSize();
+    }
+
+    return moduleSize;
+}
+
 void
 Module::SectionFileAddressesChanged ()
 {
diff --git a/source/Initialization/SystemInitializerCommon.cpp b/source/Initialization/SystemInitializerCommon.cpp
index 72d0ae3..9c20d91 100644
--- a/source/Initialization/SystemInitializerCommon.cpp
+++ b/source/Initialization/SystemInitializerCommon.cpp
@@ -40,10 +40,12 @@
 #if defined(__APPLE__)
 #include "Plugins/Platform/MacOSX/PlatformiOSSimulator.h"
 #include "Plugins/DynamicLoader/Darwin-Kernel/DynamicLoaderDarwinKernel.h"
-#include "Plugins/ObjectFile/Mach-O/ObjectFileMachO.h"
 #include "Plugins/Platform/MacOSX/PlatformDarwinKernel.h"
 #endif
 
+#include "Plugins/ObjectFile/Mach-O/ObjectFileMachO.h"
+#include "Plugins/ObjectFile/Mach-O/ObjectFileMachO.cpp"
+
 #if defined(__linux__)
 #include "Plugins/Process/POSIX/ProcessPOSIXLog.h"
 #endif
@@ -136,8 +138,8 @@ SystemInitializerCommon::Initialize()
     PlatformiOSSimulator::Initialize();
     DynamicLoaderDarwinKernel::Initialize();
     PlatformDarwinKernel::Initialize();
-    ObjectFileMachO::Initialize();
 #endif
+    ObjectFileMachO::Initialize();
 #if defined(__linux__)
     static ConstString g_linux_log_name("linux");
     ProcessPOSIXLog::Initialize(g_linux_log_name);
@@ -180,9 +182,9 @@ SystemInitializerCommon::Terminate()
 #if defined(__APPLE__)
     PlatformiOSSimulator::Terminate();
     DynamicLoaderDarwinKernel::Terminate();
-    ObjectFileMachO::Terminate();
     PlatformDarwinKernel::Terminate();
 #endif
+    ObjectFileMachO::Terminate();
 
 #if defined(_MSC_VER)
     ProcessWindowsLog::Terminate();
diff --git a/source/Plugins/Process/Utility/RegisterContextDarwin_arm.cpp b/source/Plugins/Process/Utility/RegisterContextDarwin_arm.cpp
index 452fb47..fbd49b6 100644
--- a/source/Plugins/Process/Utility/RegisterContextDarwin_arm.cpp
+++ b/source/Plugins/Process/Utility/RegisterContextDarwin_arm.cpp
@@ -7,7 +7,7 @@
 //
 //===----------------------------------------------------------------------===//
 
-#if defined(__APPLE__)
+#if 1 //defined(__APPLE__)
 
 #include "RegisterContextDarwin_arm.h"
 
diff --git a/source/Plugins/Process/Utility/RegisterContextDarwin_arm64.cpp b/source/Plugins/Process/Utility/RegisterContextDarwin_arm64.cpp
index 7de042d..e03f3a6 100644
--- a/source/Plugins/Process/Utility/RegisterContextDarwin_arm64.cpp
+++ b/source/Plugins/Process/Utility/RegisterContextDarwin_arm64.cpp
@@ -7,7 +7,7 @@
 //
 //===----------------------------------------------------------------------===//
 
-#if defined(__APPLE__)
+#if 1 //defined(__APPLE__)
 
 #include "RegisterContextDarwin_arm64.h"
 
