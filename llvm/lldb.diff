diff --git a/cmake/modules/LLDBConfig.cmake b/cmake/modules/LLDBConfig.cmake
index 7265526..807f948 100644
--- a/cmake/modules/LLDBConfig.cmake
+++ b/cmake/modules/LLDBConfig.cmake
@@ -100,37 +100,22 @@ function(find_python_libs_windows)
   file(TO_CMAKE_PATH "${PYTHON_HOME}/libs/${PYTHONLIBS_BASE_NAME}.lib" PYTHON_RELEASE_LIB)
   file(TO_CMAKE_PATH "${PYTHON_HOME}/${PYTHONLIBS_BASE_NAME}.dll" PYTHON_RELEASE_DLL)

-  if (NOT EXISTS ${PYTHON_DEBUG_EXE})
-    message("Unable to find ${PYTHON_DEBUG_EXE}")
-    unset(PYTHON_DEBUG_EXE)
-  endif()
-
   if (NOT EXISTS ${PYTHON_RELEASE_EXE})
     message("Unable to find ${PYTHON_RELEASE_EXE}")
     unset(PYTHON_RELEASE_EXE)
   endif()

-  if (NOT EXISTS ${PYTHON_DEBUG_LIB})
-    message("Unable to find ${PYTHON_DEBUG_LIB}")
-    unset(PYTHON_DEBUG_LIB)
-  endif()
-
   if (NOT EXISTS ${PYTHON_RELEASE_LIB})
     message("Unable to find ${PYTHON_RELEASE_LIB}")
     unset(PYTHON_RELEASE_LIB)
   endif()

-  if (NOT EXISTS ${PYTHON_DEBUG_DLL})
-    message("Unable to find ${PYTHON_DEBUG_DLL}")
-    unset(PYTHON_DEBUG_DLL)
-  endif()
-
   if (NOT EXISTS ${PYTHON_RELEASE_DLL})
     message("Unable to find ${PYTHON_RELEASE_DLL}")
     unset(PYTHON_RELEASE_DLL)
   endif()

-  if (NOT (PYTHON_DEBUG_EXE AND PYTHON_RELEASE_EXE AND PYTHON_DEBUG_LIB AND PYTHON_RELEASE_LIB AND PYTHON_DEBUG_DLL AND PYTHON_RELEASE_DLL))
+  if (NOT (PYTHON_RELEASE_EXE AND PYTHON_RELEASE_LIB AND PYTHON_RELEASE_DLL))
     message("Python installation is corrupt. Python support will be disabled for this build.")
     set(LLDB_DISABLE_PYTHON 1 PARENT_SCOPE)
     return()
@@ -184,7 +169,7 @@ if (NOT LLDB_DISABLE_PYTHON)
   else()
     find_package(PythonLibs REQUIRED)
   endif()
-
+
   if (PYTHON_INCLUDE_DIRS)
     include_directories(${PYTHON_INCLUDE_DIRS})
   endif()
diff --git a/include/lldb/Core/Module.h b/include/lldb/Core/Module.h
index 2ffe57a..3174ecf 100644
--- a/include/lldb/Core/Module.h
+++ b/include/lldb/Core/Module.h
@@ -700,6 +700,8 @@ public:
   //------------------------------------------------------------------
   virtual SectionList *GetSectionList();

+  size_t GetModuleSize();
+
   //------------------------------------------------------------------
   /// Notify the module that the file addresses for the Sections have
   /// been updated.
diff --git a/source/Commands/CommandObjectTarget.cpp b/source/Commands/CommandObjectTarget.cpp
index a80acf1..230d302 100644
--- a/source/Commands/CommandObjectTarget.cpp
+++ b/source/Commands/CommandObjectTarget.cpp
@@ -3048,8 +3048,9 @@ protected:

     bool dump_object_name = false;
     if (m_options.m_format_array.empty()) {
-      m_options.m_format_array.push_back(std::make_pair('u', 0));
+      // m_options.m_format_array.push_back(std::make_pair('u', 0));
       m_options.m_format_array.push_back(std::make_pair('h', 0));
+      m_options.m_format_array.push_back(std::make_pair('l', 0));
       m_options.m_format_array.push_back(std::make_pair('f', 0));
       m_options.m_format_array.push_back(std::make_pair('S', 0));
     }
@@ -3084,6 +3085,10 @@ protected:
         dump_object_name = true;
         break;

+      case 'l':
+          strm.Printf("0x%X", module->GetModuleSize());
+          break;
+
       case 'h':
       case 'o':
         // Image header address
@@ -3107,11 +3112,11 @@ protected:
                   if (format_char == 'o') {
                     // Show the offset of slide for the image
                     strm.Printf(
-                        "0x%*.*" PRIx64, addr_nibble_width, addr_nibble_width,
+                        "0x%*.*" PRIX64, addr_nibble_width, addr_nibble_width,
                         header_load_addr - header_addr.GetFileAddress());
                   } else {
                     // Show the load address of the image
-                    strm.Printf("0x%*.*" PRIx64, addr_nibble_width,
+                    strm.Printf("0x%*.*" PRIX64, addr_nibble_width,
                                 addr_nibble_width, header_load_addr);
                   }
                 }
diff --git a/source/Core/Module.cpp b/source/Core/Module.cpp
index aaae470..f3ef3c3 100644
--- a/source/Core/Module.cpp
+++ b/source/Core/Module.cpp
@@ -1324,6 +1324,24 @@ SectionList *Module::GetSectionList() {
   return m_sections_ap.get();
 }

+size_t Module::GetModuleSize()
+{
+    SectionList* sections = GetSectionList();
+    size_t moduleSize = 0;
+
+    if (!sections)
+        return moduleSize;
+
+    for (size_t i = 0, n = sections->GetSize(); i != n; ++i)
+    {
+        SectionSP s = sections->GetSectionAtIndex(i);
+        if (s)
+            moduleSize += s->GetByteSize();
+    }
+
+    return moduleSize;
+}
+
 void Module::SectionFileAddressesChanged() {
   ObjectFile *obj_file = GetObjectFile();
   if (obj_file)
diff --git a/source/Initialization/SystemInitializerCommon.cpp b/source/Initialization/SystemInitializerCommon.cpp
index e76ba41..cf18f86 100644
--- a/source/Initialization/SystemInitializerCommon.cpp
+++ b/source/Initialization/SystemInitializerCommon.cpp
@@ -23,9 +23,11 @@
 #include "lldb/Utility/Timer.h"

 #if defined(__APPLE__)
-#include "Plugins/ObjectFile/Mach-O/ObjectFileMachO.h"
 #endif

+#include "Plugins/ObjectFile/Mach-O/ObjectFileMachO.h"
+#include "Plugins/ObjectFile/Mach-O/ObjectFileMachO.cpp"
+
 #if defined(__linux__) || defined(__FreeBSD__) || defined(__NetBSD__)
 #include "Plugins/Process/POSIX/ProcessPOSIXLog.h"
 #endif
@@ -92,8 +94,8 @@ void SystemInitializerCommon::Initialize() {
   ObjectContainerUniversalMachO::Initialize();

 #if defined(__APPLE__)
-  ObjectFileMachO::Initialize();
 #endif
+  ObjectFileMachO::Initialize();
 #if defined(__linux__) || defined(__FreeBSD__) || defined(__NetBSD__)
   ProcessPOSIXLog::Initialize();
 #endif
@@ -115,8 +117,8 @@ void SystemInitializerCommon::Terminate() {

   ObjectContainerUniversalMachO::Terminate();
 #if defined(__APPLE__)
-  ObjectFileMachO::Terminate();
 #endif
+  ObjectFileMachO::Terminate();

 #if defined(_MSC_VER)
   ProcessWindowsLog::Terminate();
diff --git a/source/Plugins/Process/Utility/RegisterContextDarwin_arm.cpp b/source/Plugins/Process/Utility/RegisterContextDarwin_arm.cpp
index 64a697f..dbeae6d 100644
--- a/source/Plugins/Process/Utility/RegisterContextDarwin_arm.cpp
+++ b/source/Plugins/Process/Utility/RegisterContextDarwin_arm.cpp
@@ -7,7 +7,7 @@
 //
 //===----------------------------------------------------------------------===//

-#if defined(__APPLE__)
+#if 1 //defined(__APPLE__)

 #include "RegisterContextDarwin_arm.h"

diff --git a/source/Plugins/Process/Utility/RegisterContextDarwin_arm64.cpp b/source/Plugins/Process/Utility/RegisterContextDarwin_arm64.cpp
index 0c36f1a..00b8854 100644
--- a/source/Plugins/Process/Utility/RegisterContextDarwin_arm64.cpp
+++ b/source/Plugins/Process/Utility/RegisterContextDarwin_arm64.cpp
@@ -8,7 +8,7 @@
 //
 //===----------------------------------------------------------------------===//

-#if defined(__APPLE__)
+#if 1 //defined(__APPLE__)

 #include "RegisterContextDarwin_arm64.h"

diff --git a/source/Target/Target.cpp b/source/Target/Target.cpp
index d97f651..171612a 100644
--- a/source/Target/Target.cpp
+++ b/source/Target/Target.cpp
@@ -3325,7 +3325,7 @@ static PropertyDefinition g_properties[] = {
      eLoadScriptFromSymFileWarn, nullptr, g_load_script_from_sym_file_values,
      "Allow LLDB to load scripting resources embedded in symbol files when "
      "available."},
-    {"load-cwd-lldbinit", OptionValue::eTypeEnum, false, eLoadCWDlldbinitWarn,
+    {"load-cwd-lldbinit", OptionValue::eTypeEnum, false, eLoadCWDlldbinitTrue,
      nullptr, g_load_current_working_dir_lldbinit_values,
      "Allow LLDB to .lldbinit files from the current directory automatically."},
     {"memory-module-load-level", OptionValue::eTypeEnum, false,
